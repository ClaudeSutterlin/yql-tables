<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
    <meta>
        <author>Gang Liang</author>
        <description>
            Yahoo Finance - Analyst Estimate by Stock Symbol
        </description>
        <sampleQuery>
            SELECT * FROM {table} WHERE symbol='PRLB'
        </sampleQuery>
    </meta>
    <bindings>
        <select itemPath="" produces="XML">
            <urls>
                <url>
                </url>
            </urls>
            <inputs>
                <key id="symbol" type="xs:string" paramType="variable" required="true" />
            </inputs>
            <execute>
                <![CDATA[
//%begin-include lib/common.inc

// -----------------------------------------------------------------------------
// Commonly needed functions ...

// Returns the text below the passed node as a trimmed string (YQL's trim
// method appears not to strip newlines).
function allText(node) {
    var text = [];
    for each (var x in node.descendants()) {
        if (x.nodeKind() == 'text')
            text.push(x);
    }
    return text.join(' ').replace(/^\s+|\s+$/g, '');
}

// Converts an HTML display name into a JavaScript identifier. Also
// splits out any parenthesized qualifying term, such as "ttm",
// "intraday", "mrq", or "yoy".
function makeFieldName(name) {
    name = String(name).replace(/:/g, '');
    var m = name.match(/^(.*?)\s*\((.+?)\)\s*$/);
    var term = null;
    if (m) {
        name = m[1];
        term = m[2];
    }
    name = name.replace(/\b(.)/g, function(s){
        return s.toUpperCase();
    });
    name = name.replace(/[\s-]+/g, '');
    name = name.replace(/%/g, 'Pct');
    name = name.replace(/&/g, 'And');
    name = name.replace(/([a-z])\//g, '$1To');
    name = name.replace(/\W/g, '');
    if (/^\d/.test(name))
        name = 'P_' + name;
    return {name:name, term:term};
}

// Normalizes suffixed Yahoo Finance numbers to numeric values.
// Deletes %-signs. Multiplies by scale, if provided.
function parseNumber(n, scale) {
    if (!n)
        return n;
    n = String(n);
    if (/^\s*(?:[nN]\/?[aA])|-\s*$/.test(n))
        return '';
    var m = n.match(/^\s*(?:\(\s*([0-9.,]+[bBmMkK%]?)\s*\))\s*$/);
    if (m)
        n = '-' + m[1];
    var m = n.match(/^\s*(?:([+-])\s*)?([0-9.,]+)\s*([BbMmKk%]?)\s*$/);
    if (!m)
        return n
    var value = (m[1] == '-' ? -1 : 1) * m[2].replace(/,/g, '');
    switch (m[3]) {
        case 'b':
        case 'B':
            value = +(value + 'e9');
            break;
        case 'm':
        case 'M':
            value = +(value + 'e6');
            break;
        case 'k':
        case 'K':
            value = +(value + 'e3');
            break;
        default:
            value = +value;
    }
    if (scale)
        value *= scale;
    return value;
}
// -----------------------------------------------------------------------------
//%end-include f669ba5733f2ca3487833d65cb47362dc3f40f5f

// Setup Query from finance.yahoo.com
var url="http://finance.yahoo.com/q/ae?s=" + symbol;
var restquery = y.rest( url );
var rawresult = restquery.accept( "text/html" ).get().response;
var aequery = y.xpath(
        rawresult,
        "//table[@class='yfnc_tableout1']/tbody/tr[count(td)=0]/parent::*|" +
        "//table[@class='yfnc_tableout1']/tbody/tr/td/table/tbody"
    );

// Process Results
var aedata = <results symbol={symbol}></results>;
var i = 0;
while(i < aequery.length())
{
    var table  = aequery[i];
    var thead  = table.tr[0];
    var tname  = makeFieldName(thead.th[0].strong.text()).name;
    var fname1 = makeFieldName(thead.th[1].text()).name;
    var fname2 = makeFieldName(thead.th[2].text()).name;
    var fname3 = makeFieldName(thead.th[3].text()).name;
    var fname4 = makeFieldName(thead.th[4].text()).name;

    var tblval = <{tname}></{tname}>;
    var j = 1;
    while(j < table.tr.length())
    {
        var row = table.tr[j].td;
        var rname = makeFieldName(row[0].text()).name;
        var rval1 = parseNumber(row[1].text());
        var rval2 = parseNumber(row[2].text());
        var rval3 = parseNumber(row[3].text());
        var rval4 = parseNumber(row[4].text());
        tblval.appendChild(<{rname}>
            <pair name={fname1} value={rval1}></pair>
            <pair name={fname2} value={rval2}></pair>
            <pair name={fname3} value={rval3}></pair>
            <pair name={fname4} value={rval4}></pair>
        </{rname}>);
        j++;
    }
    aedata.appendChild(tblval);
    i++;
}

// Return aedata strucuture
response.object = aedata;
                ]]>
            </execute>
        </select>
    </bindings>
</table>
